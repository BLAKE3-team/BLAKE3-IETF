



Network Working Group                                  Z. Wilcox-O'Hearn
Internet-Draft                                        LeastAuthority.com
Expires: May 5, 2014                                            Nov 2013


                   BLAKE2 Cryptographic Hash Function

Abstract

   BLAKE2 is a cryptographic hash function.  BLAKE2 is efficient enough
   to be competitive with MD5 and SHA-1 on typical modern CPUs, while
   offering security comparable to that of SHA-3 [XXX C.N.].  BLAKE2 is
   derived from BLAKE, which was a finalist in the SHA-3 competition
   [XXX link needed to SHA-3 competition? maybe the final report?].  Its
   core algorithm is derived from the stream cipher ChaCha [XXX forward-
   reference to ChaCha-in-TLS RFC].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 5, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Wilcox-O'Hearn             Expires May 5, 2014                  [Page 1]

Internet-Draft     BLAKE2 Cryptographic Hash Function           Nov 2013


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Definition of BLAKE2  . . . . . . . . . . . . . . . . . . . .   3
   3.  Security  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Appendix -- Sample Code . . . . . . . . . . . . . . . . . . .   3
   5.  Appendix -- Test Vectors  . . . . . . . . . . . . . . . . . .   8
   6.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .   9
   7.  Reference . . . . . . . . . . . . . . . . . . . . . . . . . .   9
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   9

1.  Introduction

   A cryptographic hash function is required in many protocols.  MD5 and
   SHA-1 continue to be widely used, even though they are NOT
   RECOMMENDED [XXX Is this correct use of this capitalized term?]
   because they are vulnerable to collision [XXX C.N. to some RFC
   deprecating MD5 and SHA-1].  Usage of MD5 and SHA-1 persists in
   applications where potentially large datasets are hashed and
   performance is critical, such as host-based intrusion detection
   systems [XXX Citation Needed], digital forensics [XXX C.N. that NIST
   recommendation to use MD5 and/or SHA-1 in digital forensics], peer-
   to-peer file-sharing protocols [XXX C.N.], distributed filesystems
   [XXX C.N.], distributed databases [XXX C.N.], and revision control
   systems [XXX C.N. git and perforce].

   BLAKE2 [XXX C.N. the blake2 paper], is intended to provide an
   alternative to MD5 and SHA-1, which is secure while also being faster
   than MD5 or SHA-1.  On a recent Intel Haswell CPU, BLAKE2 takes 4.1
   cycles per byte (cpb), compared to 4.4 cpb for SHA-1, 5.1 cpb for
   MD5, 10.5 cpb for SHA-3-256, and 12.0 cpb for SHA-256 (measuring the
   median cpb when hashing a 4096-byte message).  [XXX C.N. http://
   bench.cr.yp.to/results-hash.html#amd64-haswell [1] ?]

   BLAKE2's security (e.g. collision-resistance) is conjectured to be
   similar to that of SHA-3 [XXX C.N. Guo et al.].  BLAKE2 is based upon
   the ChaCha stream cipher [XXX forward-reference to the ChaCha-in-TLS
   RFC].  BLAKE2 is immune to length-extension, like SHA-3, and unlike
   MD5, SHA-1, and SHA-2.

   In addition to providing an alternative to MD5 and SHA-1, BLAKE2 may
   be useful to have on-hand as an alternative to SHA-3, so that there
   is more than one high-security cryptographic hash function available
   in the future, for the purpose of algorithm-agility [e.g. RFC4982,
   RFC5035].





Wilcox-O'Hearn             Expires May 5, 2014                  [Page 2]

Internet-Draft     BLAKE2 Cryptographic Hash Function           Nov 2013


2.  Definition of BLAKE2

3.  Security

4.  Appendix -- Sample Code

   Here is an implementation of BLAKE2 which is intended for readability
   and correctness rather than efficiency.:

   static const uint64_t blake2b_IV[8] =
   {
     0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
     0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
     0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
     0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
   };

   static const uint8_t blake2b_sigma[12][16] =
   {
     {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
     { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 } ,
     { 11,  8, 12,  0,  5,  2, 15, 13, 10, 14,  3,  6,  7,  1,  9,  4 } ,
     {  7,  9,  3,  1, 13, 12, 11, 14,  2,  6,  5, 10,  4,  0, 15,  8 } ,
     {  9,  0,  5,  7,  2,  4, 10, 15, 14,  1, 11, 12,  6,  8,  3, 13 } ,
     {  2, 12,  6, 10,  0, 11,  8,  3,  4, 13,  7,  5, 15, 14,  1,  9 } ,
     { 12,  5,  1, 15, 14, 13,  4, 10,  0,  7,  6,  3,  9,  2,  8, 11 } ,
     { 13, 11,  7, 14, 12,  1,  3,  9,  5,  0, 15,  4,  8,  6,  2, 10 } ,
     {  6, 15, 14,  9, 11,  3,  0,  8, 12,  2, 13,  7,  1,  4, 10,  5 } ,
     { 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 } ,
     {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
     { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 }
   };

   static inline int blake2b_set_lastnode( blake2b_state *S )
   {
     S->f[1] = ~0ULL;
     return 0;
   }

   static inline int blake2b_clear_lastnode( blake2b_state *S )
   {
     S->f[1] = 0ULL;
     return 0;
   }

   static inline int blake2b_set_lastblock( blake2b_state *S )
   {
     if( S->last_node ) blake2b_set_lastnode( S );



Wilcox-O'Hearn             Expires May 5, 2014                  [Page 3]

Internet-Draft     BLAKE2 Cryptographic Hash Function           Nov 2013


     S->f[0] = ~0ULL;
     return 0;
   }

   static inline int blake2b_clear_lastblock( blake2b_state *S )
   {
     if( S->last_node ) blake2b_clear_lastnode( S );

     S->f[0] = 0ULL;
     return 0;
   }

   static inline int blake2b_increment_counter( blake2b_state *S, const uint64_t inc )
   {
     S->t[0] += inc;
     S->t[1] += ( S->t[0] < inc );
     return 0;
   }

   static inline int blake2b_init0( blake2b_state *S )
   {
     memset( S, 0, sizeof( blake2b_state ) );

     for( int i = 0; i < 8; ++i ) S->h[i] = blake2b_IV[i];

     return 0;
   }

   /* init xors IV with input parameter block */
   int blake2b_init_param( blake2b_state *S, const blake2b_param *P )
   {
     blake2b_init0( S );
     uint8_t *p = ( uint8_t * )( P );

     /* IV XOR ParamBlock */
     for( size_t i = 0; i < 8; ++i )
       S->h[i] ^= load64( p + sizeof( S->h[i] ) * i );

     return 0;
   }

   int blake2b_init( blake2b_state *S, const uint8_t outlen )
   {
     blake2b_param P[1];

     if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) return -1;

     P->digest_length = outlen;



Wilcox-O'Hearn             Expires May 5, 2014                  [Page 4]

Internet-Draft     BLAKE2 Cryptographic Hash Function           Nov 2013


     P->key_length    = 0;
     P->fanout        = 1;
     P->depth         = 1;
     store32( &P->leaf_length, 0 );
     store64( &P->node_offset, 0 );
     P->node_depth    = 0;
     P->inner_length  = 0;
     memset( P->reserved, 0, sizeof( P->reserved ) );
     memset( P->salt,     0, sizeof( P->salt ) );
     memset( P->personal, 0, sizeof( P->personal ) );
     return blake2b_init_param( S, P );
   }


   int blake2b_init_key( blake2b_state *S, const uint8_t outlen, const void *key, const uint8_t keylen )
   {
     blake2b_param P[1];

     if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) return -1;

     if ( !key || !keylen || keylen > BLAKE2B_KEYBYTES ) return -1;

     P->digest_length = outlen;
     P->key_length    = keylen;
     P->fanout        = 1;
     P->depth         = 1;
     store32( &P->leaf_length, 0 );
     store64( &P->node_offset, 0 );
     P->node_depth    = 0;
     P->inner_length  = 0;
     memset( P->reserved, 0, sizeof( P->reserved ) );
     memset( P->salt,     0, sizeof( P->salt ) );
     memset( P->personal, 0, sizeof( P->personal ) );

     if( blake2b_init_param( S, P ) < 0 ) return -1;

     {
       uint8_t block[BLAKE2B_BLOCKBYTES];
       memset( block, 0, BLAKE2B_BLOCKBYTES );
       memcpy( block, key, keylen );
       blake2b_update( S, block, BLAKE2B_BLOCKBYTES );
       secure_zero_memory( block, BLAKE2B_BLOCKBYTES ); /* Burn the key from stack */
     }
     return 0;
   }

   static int blake2b_compress( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] )
   {



Wilcox-O'Hearn             Expires May 5, 2014                  [Page 5]

Internet-Draft     BLAKE2 Cryptographic Hash Function           Nov 2013


     uint64_t m[16];
     uint64_t v[16];
     int i;

     for( i = 0; i < 16; ++i )
       m[i] = load64( block + i * sizeof( m[i] ) );

     for( i = 0; i < 8; ++i )
       v[i] = S->h[i];

     v[ 8] = blake2b_IV[0];
     v[ 9] = blake2b_IV[1];
     v[10] = blake2b_IV[2];
     v[11] = blake2b_IV[3];
     v[12] = S->t[0] ^ blake2b_IV[4];
     v[13] = S->t[1] ^ blake2b_IV[5];
     v[14] = S->f[0] ^ blake2b_IV[6];
     v[15] = S->f[1] ^ blake2b_IV[7];
   #define G(r,i,a,b,c,d) \
     do { \
       a = a + b + m[blake2b_sigma[r][2*i+0]]; \
       d = rotr64(d ^ a, 32); \
       c = c + d; \
       b = rotr64(b ^ c, 24); \
       a = a + b + m[blake2b_sigma[r][2*i+1]]; \
       d = rotr64(d ^ a, 16); \
       c = c + d; \
       b = rotr64(b ^ c, 63); \
     } while(0)
   #define ROUND(r)  \
     do { \
       G(r,0,v[ 0],v[ 4],v[ 8],v[12]); \
       G(r,1,v[ 1],v[ 5],v[ 9],v[13]); \
       G(r,2,v[ 2],v[ 6],v[10],v[14]); \
       G(r,3,v[ 3],v[ 7],v[11],v[15]); \
       G(r,4,v[ 0],v[ 5],v[10],v[15]); \
       G(r,5,v[ 1],v[ 6],v[11],v[12]); \
       G(r,6,v[ 2],v[ 7],v[ 8],v[13]); \
       G(r,7,v[ 3],v[ 4],v[ 9],v[14]); \
     } while(0)
     ROUND( 0 );
     ROUND( 1 );
     ROUND( 2 );
     ROUND( 3 );
     ROUND( 4 );
     ROUND( 5 );
     ROUND( 6 );
     ROUND( 7 );



Wilcox-O'Hearn             Expires May 5, 2014                  [Page 6]

Internet-Draft     BLAKE2 Cryptographic Hash Function           Nov 2013


     ROUND( 8 );
     ROUND( 9 );
     ROUND( 10 );
     ROUND( 11 );

     for( i = 0; i < 8; ++i )
       S->h[i] = S->h[i] ^ v[i] ^ v[i + 8];

   #undef G
   #undef ROUND
     return 0;
   }

   int blake2b_update( blake2b_state *S, const uint8_t *in, uint64_t inlen )
   {
     while( inlen > 0 )
     {
       size_t left = S->buflen;
       size_t fill = 2 * BLAKE2B_BLOCKBYTES - left;

       if( inlen > fill )
       {
         memcpy( S->buf + left, in, fill ); // Fill buffer
         S->buflen += fill;
         blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
         blake2b_compress( S, S->buf ); // Compress
         memcpy( S->buf, S->buf + BLAKE2B_BLOCKBYTES, BLAKE2B_BLOCKBYTES ); // Shift buffer left
         S->buflen -= BLAKE2B_BLOCKBYTES;
         in += fill;
         inlen -= fill;
       }
       else // inlen <= fill
       {
         memcpy( S->buf + left, in, inlen );
         S->buflen += inlen; // Be lazy, do not compress
         in += inlen;
         inlen -= inlen;
       }
     }

     return 0;
   }

   int blake2b_final( blake2b_state *S, uint8_t *out, uint8_t outlen )
   {
     uint8_t buffer[BLAKE2B_OUTBYTES];

     if( S->buflen > BLAKE2B_BLOCKBYTES )



Wilcox-O'Hearn             Expires May 5, 2014                  [Page 7]

Internet-Draft     BLAKE2 Cryptographic Hash Function           Nov 2013


     {
       blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
       blake2b_compress( S, S->buf );
       S->buflen -= BLAKE2B_BLOCKBYTES;
       memcpy( S->buf, S->buf + BLAKE2B_BLOCKBYTES, S->buflen );
     }

     blake2b_increment_counter( S, S->buflen );
     blake2b_set_lastblock( S );
     memset( S->buf + S->buflen, 0, 2 * BLAKE2B_BLOCKBYTES - S->buflen ); /* Padding */
     blake2b_compress( S, S->buf );

     for( int i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
       store64( buffer + sizeof( S->h[i] ) * i, S->h[i] );

     memcpy( out, buffer, outlen );
     return 0;
   }

   /* inlen, at least, should be uint64_t. Others can be size_t. */
   int blake2b( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen )
   {
     blake2b_state S[1];

     /* Verify parameters */
     if ( NULL == in ) return -1;

     if ( NULL == out ) return -1;

     if( NULL == key ) keylen = 0;

     if( keylen > 0 )
     {
       if( blake2b_init_key( S, outlen, key, keylen ) < 0 ) return -1;
     }
     else
     {
       if( blake2b_init( S, outlen ) < 0 ) return -1;
     }

     blake2b_update( S, ( uint8_t * )in, inlen );
     blake2b_final( S, out, outlen );
     return 0;
   }

5.  Appendix -- Test Vectors





Wilcox-O'Hearn             Expires May 5, 2014                  [Page 8]

Internet-Draft     BLAKE2 Cryptographic Hash Function           Nov 2013


6.  Acknowledgments

7.  Reference

8.  References

Author's Address

   Zooko Wilcox-O'Hearn
   LeastAuthority.com

   Email: zooko@LeastAuthority.com







































Wilcox-O'Hearn             Expires May 5, 2014                  [Page 9]
